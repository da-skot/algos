/*
Построение кучи — ключевой шаг алгоритма сортировки кучей. Данный алгоритм имеет время работы O(n log n) в худшем случае в отличие от алгоритма быстрой сортировки, 
который гарантирует такую оценку только в среднем случае. Алгоритм быстрой сортировки чаще используют на практике, поскольку в большинстве случаев он работает быстрее, 
но алгоритм сортировки кучей используется для внешней сортировки данных, когда необходимо отсортировать данные огромного размера, не помещающиеся в память компьютера.

Чтобы превратить данный массив в кучу, необходимо произвести несколько обменов его элементов. Обменом мы называем базовую операцию, которая меняет местами элементы A[i] и A[j]. 
Ваша цель в данной задаче — преобразовать заданный массив в кучу за линейное количество обменов.

Задача из курса «Алгоритмы: теория и практика. Структуры данных»: https://stepik.org/course/1547/syllabus
Формат ввода

Первая строка содержит число n. Следующая строка задаёт массив чисел A[0], … , A[n - 1] (1 ≤ n ≤ 105; 0 ≤ A[i] ≤ 109 для всех 0 ≤ i ≤ n - 1; все A[i] попарно различны; ).
Формат вывода

Первая строка выхода должна содержать число обменов m, которое должно удовлетворять неравенству 0 ≤ m ≤ 4n. 
Каждая из последующих m строк должна задавать обмен двух элементов массива A. Каждый обмен задаётся парой различных индексов , 
причем выполнено одно из равенств j = 2i + 1, j = 2i + 2, i = 2j + 1 или i = 2j + 2.

После применения всех обменов в указанном порядке массив должен превратиться в мин-кучу, то есть для всех 0 ≤ i ≤ n - 1 должны выполняться следующие два условия:

    если 2i + 1 ≤ n − 1, то A[i] < A[2i + 1].
    если 2i + 2 ≤ n − 1, то A[i] < A[2i + 2].

*/

using System;
using System.Collections.Generic;

namespace evklid
{
    class Program
    {
        private static int[] arr;
        static int n;
        private static List<String> heaps = new List<string>();
        static void Main(string[] args)
        {
            n = Int32.Parse(Console.ReadLine());
            arr = new int[n];
            string[] str = Console.ReadLine().Split(' ');
            for (int i = 0; i < str.Length; i++)
                arr[i] = Int32.Parse(str[i]);
            for (int i = n; i >= 0; i--)
                heap(i);
            Console.WriteLine(heaps.Count);
            foreach (string q in heaps)
                Console.WriteLine(q);
        }
        static void heap(int i)
        {
            int left = 2 * i + 1;
            int right = 2 * i + 2;
            int min = i;
            if (left < arr.Length)
                min = left;
            if (right < n && arr[right] < arr[left])
                min = right;
            if (i != min && arr[i] > arr[min])
            {
                int t = arr[i];
                arr[i] = arr[min];
                arr[min] = t;
                heaps.Add($"{i} {min}");
                heap(min);
            }
        }
    }
}
