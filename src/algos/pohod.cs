/*
Группа школьников решила сходить в поход вдоль Москвы-реки. У Москвы-реки существует множество притоков, которые могут впадать в нее как с правого (R), так и с левого берега (L). 
Школьники хотят начать поход в некоторой точке на левом берегу и закончить поход в некоторой точке на правом берегу, возможно, переправляясь через реки несколько раз. 
Как известно, переправа как через реку, так и через приток представляет собой определенную сложность, поэтому они хотят минимизировать число совершенных переправ. 
Школьники заранее изучили карту и записали, в какой последовательности в Москву-реку впадают притоки на всем их маршруте. 
Помогите школьникам по данному описанию притоков определить минимальное количество переправ, которое им придется совершить во время похода. 
Описание притоков - строка, состоящая из последовательности трех символов R - правый приток, L - левый приток, B - притоки справа и слева одновременно.

Пример вход: LLBLRRBRL выход: 5
Формат ввода

Одна строка из символов L,R,B. Символы в строке ничем не разделяются.
Формат вывода

Одно целое число в первой строке.
*/

using System;
using System.IO;

namespace podposled
{
    class Program
    {
        static void Main(string[] args)
        {
            string way;
            using (StreamReader sr = new StreamReader("input.txt"))
            {
                way = sr.ReadLine();
            }
            int[,] arr = new int[way.Length+1, 2];
            arr[0, 0] = 1;
            for(int i = 1; i <= way.Length; i++)
            {
                if (way[i - 1] == 'L')
                {
                    arr[i, 0] = Math.Min(arr[i - 1, 0], arr[i - 1, 1] + 1);
                    arr[i, 1] = Math.Min(arr[i - 1, 1], arr[i - 1, 0]) + 1;
                }
                else if (way[i - 1] == 'R')
                {
                    arr[i, 0] = Math.Min(arr[i - 1, 0], arr[i - 1, 1]) + 1;
                    arr[i, 1] = Math.Min(arr[i - 1, 1], arr[i - 1, 0] + 1);
                }
                else
                {
                    arr[i, 0] = Math.Min(arr[i - 1, 0], arr[i - 1, 1] + 1)+1;
                    arr[i, 1] = Math.Min(arr[i - 1, 1], arr[i - 1, 0] + 1)+1;
                }
            }
            using (StreamWriter sw = new StreamWriter("output.txt"))
            {
                sw.WriteLine(arr[way.Length,0]);
            }
        }
    }
}
